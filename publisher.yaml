
AWSTemplateFormatVersion: 2010-09-09
Description: Template responsable for creating publisher resources

Parameters:

  Environment:
    Type: String
  Subnet1:
    Type: String
  Subnet2:
    Type: String
  Subnet3:
    Type: String
  EC2KeyPair:
    Type: String
  PubPrivateVPC:
    Type: String
  AMIId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
  BrokerDomain:
    Type: String

Resources:

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
          IamInstanceProfile:
            Arn: !GetAtt [InstanceProfile,Arn]
          ImageId: !Ref AMIId
          InstanceType: t3a.nano
          KeyName: !Ref EC2KeyPair
          Monitoring:
            Enabled: true
          SecurityGroupIds:
            - !Ref SecurityGroup
          UserData:
            Fn::Base64:
              !Sub |
                #!/bin/bash -ex
                export AWS_DEFAULT_REGION=${AWS::Region}

                amazon-linux-extras install python3.8 -y
                yum install git jq stress-ng tc htop -y
                git clone https://github.com/leandromoreeira/mqtt-client.git /home/ec2-user/mqtt-client
                pip3.8 install -r /home/ec2-user/mqtt-client/requirements.txt

                INSTANCE_ID=`curl -s http://169.254.169.254/latest/meta-data/instance-id`
                DESCRIBE_INSTANCE=`aws ec2 describe-instances --instance-ids $INSTANCE_ID`
                MESSAGES=`echo $DESCRIBE_INSTANCE | jq -r '.Reservations[0].Instances[0].Tags[] | select(.Key == "messages" ) | .Value'`
                SECONDS=`echo $DESCRIBE_INSTANCE | jq -r '.Reservations[0].Instances[0].Tags[] | select(.Key == "seconds" ) | .Value'`
                python3.8 /home/ec2-user/mqtt-client/publisher.py -t uel/dc/sensors -b ${BrokerDomain} -u iot -p iot@2020 -d ${DynamoDBTable} -m $MESSAGES -s $SECONDS
                aws ec2 terminate-instances --instance-ids $INSTANCE_ID
      # LaunchTemplateName: !Sub ${Environment}

  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
       - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: DynamoDB
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}
        - PolicyName: Ec2Permissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeInstances'
                  - 'ec2:TerminateInstances'
                Resource: '*'
      RoleName: !Sub ${Environment}

  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: !Sub ${Environment}
      Path: /
      Roles:
        - !Ref Role

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Environment}
      GroupDescription: !Sub ${Environment}
      VpcId: !Ref PubPrivateVPC
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      # TableName: !Sub ${Environment}


Outputs:

  SecurityGroup:
    Description: Security Group
    Value: !Ref SecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-SecurityGroup
